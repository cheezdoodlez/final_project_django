USER AUTH EXPLANATION (MODELS):

The user authentication aspect in your code relies on Django's built-in User model from django.contrib.auth.models. Here's a detailed explanation of how authentication is incorporated:

1. Django's User Model
The User model is provided by Django out of the box and includes fields for:

Username (username)
Email Address (email)
Password (stored securely as a hash)
First and Last Names (first_name, last_name)
Authentication Features (e.g., groups, permissions, superuser status)
This model handles the core of user authentication and can be extended if needed.

2. How User is Used in the Code
ForeignKey Relationships:
Several models (Recipe, MealPlan, and GroceryItem) include a ForeignKey to the User model to establish a relationship between the user and their data:

Recipe: Tracks who created the recipe using the created_by field.
MealPlan: Associates meal plans with a specific user using the user field.
GroceryItem: Ensures grocery lists are tied to individual users.
Cascade Behavior:
The on_delete=models.CASCADE argument ensures that if a user is deleted, all their associated data (e.g., recipes, meal plans, and grocery items) is also deleted.

3. Authentication in Action
In a real-world app, you would use Django's built-in authentication system to:

Allow users to register, log in, and log out.
Secure API endpoints so only authenticated users can access or modify their data.
4. Practical Flow
User Registration:
New users can sign up using Djangoâ€™s User model.

Authenticated Requests:
When users log in, their session or token (e.g., via Django Rest Framework) will allow them to:

Create recipes (created_by tracks the logged-in user).
View and manage only their data (e.g., meal plans and grocery items).
Example Use Case:

User logs in and creates a recipe.
The created_by field automatically stores their User instance.
Only this user can view or edit their recipes, thanks to API permissions or query filtering.
